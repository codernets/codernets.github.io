{
  "name": "cucumber",
  "description": "The official JavaScript implementation of Cucumber.",
  "keywords": [
    "testing",
    "bdd",
    "cucumber",
    "gherkin",
    "tests"
  ],
  "version": "0.3.3",
  "homepage": "http://github.com/cucumber/cucumber-js",
  "author": {
    "name": "Julien Biezemans",
    "email": "jb@jbpros.com",
    "url": "http://jbpros.net"
  },
  "contributors": [
    {
      "name": "Julien Biezemans",
      "email": "jb@jbpros.com",
      "url": "http://jbpros.net"
    },
    {
      "name": "Fernando Acorreia",
      "email": "fernandoacorreia@gmail.com"
    },
    {
      "name": "Paul Jensen",
      "email": "paulbjensen@gmail.com"
    },
    {
      "name": "Kushal Pisavadia"
    },
    {
      "name": "Olivier Melcher",
      "email": "olivier.melcher@gmail.com"
    },
    {
      "name": "Tristan Dunn",
      "email": "tristanzdunn@gmail.com"
    },
    {
      "name": "Ted de Koning"
    },
    {
      "name": "Renier Morales",
      "email": "renier@morales-rodriguez.net"
    },
    {
      "name": "Aslak Hellesøy",
      "email": "aslak.hellesoy@gmail.com"
    },
    {
      "name": "Aaron Garvey"
    },
    {
      "name": "Omar Gonzalez",
      "email": "omar@almerblank.com"
    },
    {
      "name": "Chris Young",
      "email": "chris@chrisyoung.org"
    },
    {
      "name": "Israel Halle",
      "email": "isra017@gmail.com"
    },
    {
      "name": "Matteo Collina",
      "email": "matteo.collina@gmail.com"
    },
    {
      "name": "Niklas Närhinen",
      "email": "niklas@narhinen.net"
    },
    {
      "name": "Kim, Jang-hwan",
      "email": "janghwan@gmail.com"
    },
    {
      "name": "Michael Zedeler",
      "email": "michael@zedeler.dk"
    },
    {
      "name": "Tom V",
      "email": "tom@toc.com"
    },
    {
      "name": "David Godfrey",
      "email": "reactiveraven@reactiveraven.co.uk"
    },
    {
      "name": "Paul Shannon",
      "url": "http://devpaul.com"
    },
    {
      "name": "Simon Dean",
      "email": "simon@simondean.org",
      "url": "http://www.simondean.org"
    },
    {
      "name": "John Wright",
      "email": "johngeorge.wright@gmail.com"
    },
    {
      "name": "Johny Jose",
      "email": "johny@playlyfe.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/cucumber/cucumber-js.git"
  },
  "bugs": {
    "url": "http://github.com/cucumber/cucumber-js/issues",
    "email": "cukes@googlegroups.com"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/cucumber",
  "engines": {
    "node": "0.6 || 0.8 || 0.10 || 0.11"
  },
  "dependencies": {
    "gherkin": "2.12.2",
    "browserify": "1.15.5",
    "nopt": "2.1.2",
    "underscore": "1.5.2",
    "cucumber-html": "0.2.3",
    "walkdir": "0.0.7",
    "coffee-script": "1.6.3",
    "pogo": "0.5.1"
  },
  "devDependencies": {
    "connect": "2.11.0",
    "jasmine-node": "1.11.0",
    "mkdirp": "0.3.5",
    "rimraf": "2.2.2",
    "bower": "~1.2.7"
  },
  "scripts": {
    "test": "./bin/cucumber.js && jasmine-node spec"
  },
  "bin": {
    "cucumber.js": "./bin/cucumber.js",
    "cucumber-js": "./bin/cucumber.js"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/cucumber/cucumber.js/LICENSE"
    }
  ],
  "optionalDependencies": {},
  "gitHead": "78f79263e5855dd189e4bbe792cc6a34d7efcd19",
  "readme": "# Cucumber.js\r\n  [![Build Status](https://secure.travis-ci.org/cucumber/cucumber-js.png?branch=master)](http://travis-ci.org/cucumber/cucumber-js)\r\n  [![Dependencies](https://david-dm.org/cucumber/cucumber-js.png)](https://david-dm.org/cucumber/cucumber-js) [![Code Climate](https://codeclimate.com/github/cucumber/cucumber-js.png)](https://codeclimate.com/github/cucumber/cucumber-js)\r\n\r\n[![NPM](https://nodei.co/npm/cucumber.png?stars&downloads)](https://nodei.co/npm/cucumber/)\r\n[![NPM](https://nodei.co/npm-dl/cucumber.png)](https://nodei.co/npm/cucumber/)\r\n\r\n\r\n*Cucumber*, the [popular Behaviour-Driven Development tool](http://cukes.info), brought to your JavaScript stack.\r\n\r\nIt runs on both Node.js and *modern* web browsers.\r\n\r\n## Development status\r\n\r\nCucumber.js is still a work in progress. Here is its current status.\r\n\r\n### Cucumber Technology Compatibility Kit\r\n\r\n<table>\r\n  <thead>\r\n    <tr><th>Feature</th><th>Status</th></tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/core.feature\">Core</a> (scenarios, steps, mappings)</td>\r\n      <td>Done</td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/background.feature\">Background</a></td>\r\n      <td>Done<sup>1</sup></td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/comments.feature\">Comments</a></td>\r\n      <td>Done</td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/command_line_interface.feature\">Command-line interface</a></td>\r\n      <td>Done<sup>1, 2</sup></td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/command_line_options.feature\">Command-line options</a></td>\r\n      <td>Todo<sup>2</sup></td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/data_tables.feature\">Data tables</a></td>\r\n      <td>Done</td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/doc_strings.feature\">Doc strings</a></td>\r\n      <td>Done</td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/failing_steps.feature\">Failing steps</a></td>\r\n      <td>Done</td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/hooks.feature\">Hooks</a></td>\r\n      <td>Done</td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/i18n.feature\">I18n</a></td>\r\n      <td>To do</td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/json_formatter.feature\">JSON formatter</a></td>\r\n      <td>WIP<sup>3</sup></td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/pretty_formatter.feature\">Pretty formatter</a></td>\r\n      <td>WIP<sup>2</sup></td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/scenario_outlines_and_examples.feature\">Scenario outlines and examples</a></td>\r\n      <td>To do</td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/stats_collector.feature\">Stats collector</a></td>\r\n      <td>To do</td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/step_argument_transforms.feature\">Step argument transforms</a></td>\r\n      <td>To do</td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/tags.feature\">Tags</a></td>\r\n      <td>Done</td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/undefined_steps.feature\">Undefined steps</a></td>\r\n      <td>Done</td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/wire_protocol.feature\">Wire protocol</a></td>\r\n      <td>To do</td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/world.feature\">World</a></td>\r\n      <td>Done</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n1. Not certified by [Cucumber TCK](https://github.com/cucumber/cucumber-tck) yet.\r\n2. Considered for removal from [Cucumber TCK](https://github.com/cucumber/cucumber-tck).\r\n3. Missing 'matches' attributes. Simple wrapper for *Gherkin*'s `JsonFormatter` pending porting of:\r\n\r\n  * https://github.com/cucumber/gherkin/blob/master/lib/gherkin/listener/formatter_listener.rb\r\n  * https://github.com/cucumber/gherkin/blob/master/lib/gherkin/formatter/filter_formatter.rb\r\n\r\n  in Gherkin itself.\r\n\r\n### Cucumber.js-specific features\r\n\r\n<table>\r\n  <thead>\r\n    <tr><th>Feature</th><th>Status</th></tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-js/blob/master/features/background.feature\">Background</a></td>\r\n      <td>Done</td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-js/blob/master/features/coffeescript_support.feature\">CoffeeScript support</a></td>\r\n      <td>Done</td>\r\n    </tr>\r\n    <tr>\r\n      <td><a href=\"https://github.com/cucumber/cucumber-js/blob/master/features/cli.feature\">Command-line interface</a></td>\r\n      <td>Done</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n1. Will be certified by [Cucumber TCK](https://github.com/cucumber/cucumber-tck).\r\n\r\n## Prerequesites\r\n\r\n* [Node.js](http://nodejs.org)\r\n* [NPM](http://npmjs.org)\r\n\r\nCucumber.js is tested on:\r\n\r\n* Node.js 0.6, 0.8 and 0.10.0 (see [CI builds](http://travis-ci.org/#!/cucumber/cucumber-js))\r\n* Google Chrome\r\n* Firefox\r\n* Safari\r\n* Opera\r\n\r\nThere are plans to have CI builds on browsers too.\r\n\r\n## Usage\r\n\r\n### Install\r\n\r\nCucumber.js is available as an npm module.\r\n\r\nInstall globally with:\r\n\r\n``` shell\r\n$ npm install -g cucumber\r\n```\r\n\r\nOR\r\n\r\nYou may also define cucumber.js as a development dependency of your application by including it in a package.json file.\r\n\r\n``` json\r\n// package.json\r\n\r\n{ \"devDependencies\" : {\r\n    \"cucumber\": \"latest\"\r\n  }\r\n}\r\n```\r\n\r\nThen install with `npm install --dev`\r\n\r\n\r\n### Features\r\n\r\nFeatures are written with the [Gherkin syntax](https://github.com/cucumber/cucumber/wiki/Gherkin)\r\n\r\n``` gherkin\r\n# features/myFeature.feature\r\n\r\nFeature: Example feature\r\n  As a user of cucumber.js\r\n  I want to have documentation on cucumber\r\n  So that I can concentrate on building awesome applications\r\n\r\n  Scenario: Reading documentation\r\n    Given I am on the Cucumber.js GitHub repository\r\n    When I go to the README file\r\n    Then I should see \"Usage\" as the page title\r\n```\r\n\r\n### Support Files\r\n\r\nSupport files let you setup the environment in which steps will be run, and define step definitions. Both JavaScript (`.js`) and CoffeeScript (`.coffee`) source files are supported.\r\n\r\n#### World\r\n\r\n*World* is a constructor function with utility properties, destined to be used in step definitions:\r\n\r\n``` javascript\r\n// features/support/world.js\r\n\r\nvar zombie = require('zombie');\r\nvar World = function World(callback) {\r\n  this.browser = new zombie(); // this.browser will be available in step definitions\r\n\r\n  this.visit = function(url, callback) {\r\n    this.browser.visit(url, callback);\r\n  };\r\n\r\n  callback(); // tell Cucumber we're finished and to use 'this' as the world instance\r\n};\r\nexports.World = World;\r\n```\r\n\r\nIt is possible to tell Cucumber to use another object instance than the constructor:\r\n\r\n``` javascript\r\n// features/support/world.js\r\n\r\nvar zombie = require('zombie');\r\nvar WorldConstructor = function WorldConstructor(callback) {\r\n  this.browser = new zombie(); // this.browser will be available in step definitions\r\n\r\n  var world = {\r\n    visit: function(url, callback) {\r\n      this.browser.visit(url, callback);\r\n    }\r\n  };\r\n\r\n  callback(world); // tell Cucumber we're finished and to use our world object instead of 'this'\r\n};\r\nexports.World = WorldConstructor;\r\n```\r\n\r\n#### Step Definitions\r\n\r\nStep definitions are the glue between features written in Gherkin and the actual *SUT* (*system under test*). They are written in JavaScript.\r\n\r\nAll step definitions will run with `this` set to what is known as the *[World](https://github.com/cucumber/cucumber/wiki/A-Whole-New-World)* in Cucumber. It's an object exposing useful methods, helpers and variables to your step definitions. A new instance of `World` is created before each scenario.\r\n\r\nStep definitions are contained within one or more wrapper functions.\r\n\r\nThose wrappers are run before executing the feature suite. `this` is an object holding important properties like the `Given()`, `When()` and `Then()` functions. Another notable property is `World`; it contains a default `World` constructor that can be either extended or replaced.\r\n\r\nStep definitions are run when steps match their name. `this` is an instance of `World`.\r\n\r\n``` javascript\r\n// features/step_definitions/myStepDefinitions.js\r\n\r\nvar myStepDefinitionsWrapper = function () {\r\n  this.World = require(\"../support/world.js\").World; // overwrite default World constructor\r\n\r\n  this.Given(/^I am on the Cucumber.js GitHub repository$/, function(callback) {\r\n    // Express the regexp above with the code you wish you had.\r\n    // `this` is set to a new this.World instance.\r\n    // i.e. you may use this.browser to execute the step:\r\n\r\n    this.visit('http://github.com/cucumber/cucumber-js', callback);\r\n\r\n    // The callback is passed to visit() so that when the job's finished, the next step can\r\n    // be executed by Cucumber.\r\n  });\r\n\r\n  this.When(/^I go to the README file$/, function(callback) {\r\n    // Express the regexp above with the code you wish you had. Call callback() at the end\r\n    // of the step, or callback.pending() if the step is not yet implemented:\r\n\r\n    callback.pending();\r\n  });\r\n\r\n  this.Then(/^I should see \"(.*)\" as the page title$/, function(title, callback) {\r\n    // matching groups are passed as parameters to the step definition\r\n\r\n    var pageTitle = this.browser.text('title');\r\n    if (title === pageTitle) {\r\n      callback();\r\n    } else {\r\n      callback.fail(new Error(\"Expected to be on page with title \" + title));\r\n    }\r\n  });\r\n};\r\n\r\nmodule.exports = myStepDefinitionsWrapper;\r\n```\r\n\r\nIt is also possible to use simple strings instead of regexps as step definition patterns:\r\n\r\n```javascript\r\nthis.Then('I should see \"$title\" as the page title', function(title, callback) {\r\n  // the above string is converted to the following Regexp by Cucumber:\r\n  // /^I should see \"([^\"]*)\" as the page title$/\r\n\r\n  var pageTitle = this.browser.text('title');\r\n  if (title === pageTitle) {\r\n    callback();\r\n  } else {\r\n    callback.fail(new Error(\"Expected to be on page with title \" + title));\r\n  }\r\n});\r\n```\r\n\r\n`'I have $count \"$string\"'` would translate to `/^I have (.*) \"([^\"]*)\"$/`.\r\n\r\n#### Hooks\r\n\r\nHooks can be used to prepare and clean the environment before and after each scenario is executed.\r\n\r\n##### Before hooks\r\n\r\nTo run something before every scenario, use before hooks:\r\n\r\n``` javascript\r\n// features/support/hooks.js (this path is just a suggestion)\r\n\r\nvar myHooks = function () {\r\n  this.Before(function(callback) {\r\n    // Just like inside step definitions, \"this\" is set to a World instance.\r\n    // It's actually the same instance the current scenario step definitions\r\n    // will receive.\r\n\r\n    // Let's say we have a bunch of \"maintenance\" methods available on our World\r\n    // instance, we can fire some to prepare the application for the next\r\n    // scenario:\r\n\r\n    this.bootFullTextSearchServer();\r\n    this.createSomeUsers();\r\n\r\n    // Don't forget to tell Cucumber when you're done:\r\n    callback();\r\n  });\r\n};\r\n\r\nmodule.exports = myHooks;\r\n```\r\n\r\n##### After hooks\r\n\r\nThe *before hook* counterpart is the *after hook*. It's similar in shape but is executed, well, *after* every scenario:\r\n\r\n```javascript\r\n// features/support/after_hooks.js\r\n\r\nvar myAfterHooks = function () {\r\n  this.After(function(callback) {\r\n    // Again, \"this\" is set to the World instance the scenario just finished\r\n    // playing with.\r\n\r\n    // We can then do some cleansing:\r\n\r\n    this.emptyDatabase();\r\n    this.shutdownFullTextSearchServer();\r\n\r\n    // Release control:\r\n    callback();\r\n  });\r\n};\r\n\r\nmodule.exports = myAfterHooks;\r\n```\r\n\r\n##### Around hooks\r\n\r\nIt's also possible to combine both before and after hooks in one single definition with the help of *around hooks*:\r\n\r\n```javascript\r\n// features/support/advanced_hooks.js\r\n\r\nmyAroundHooks = function() {\r\n  this.Around(function(runScenario) {\r\n    // \"this\" is - as always - an instance of World promised to the scenario.\r\n\r\n    // First do the \"before scenario\" tasks:\r\n\r\n    this.bootFullTextSearchServer();\r\n    this.createSomeUsers();\r\n\r\n    // When the \"before\" duty is finished, tell Cucumber to execute the scenario\r\n    // and pass a function to be called when the scenario is finished:\r\n\r\n    runScenario(function(callback) {\r\n      // Now, we can do our \"after scenario\" stuff:\r\n\r\n      this.emptyDatabase();\r\n      this.shutdownFullTextSearchServer();\r\n\r\n      // Tell Cucumber we're done:\r\n      callback();\r\n    });\r\n  });\r\n};\r\n\r\nmodule.exports = myAroundHooks;\r\n```\r\n\r\n##### Tagged hooks\r\n\r\nHooks can be conditionally elected for execution based on the tags of the scenario.\r\n\r\n``` javascript\r\n// features/support/hooks.js (this path is just a suggestion)\r\n\r\nvar myHooks = function () {\r\n  this.Before(\"@foo\", \"@bar,@baz\", function(callback) {\r\n    // This hook will be executed before scenarios tagged with @foo and either\r\n    // @bar or @baz.\r\n\r\n    // ...\r\n\r\n    callback();\r\n  });\r\n};\r\n\r\nmodule.exports = myHooks;\r\n```\r\n\r\n### Run cucumber\r\n\r\nCucumber.js includes a binary file to execute the features.\r\n\r\nIf you installed cucumber.js globally, you may run it with:\r\n\r\n``` shell\r\n$ cucumber.js\r\n```\r\n\r\nYou may specify the features to run:\r\n\r\n``` shell\r\n$ cucumber.js features/my_feature.feature\r\n```\r\n\r\nAnd require specific step definitions and support code files with the --require option:\r\n\r\n``` shell\r\n$ cucumber.js features/my_feature.feature --require features/step_definitions/my_step_definitions.js\r\n```\r\n\r\nIf you installed Cucumber locally or with `npm install --dev`, you'll need to specify the path to the binary:\r\n\r\n``` shell\r\n$ ./node_modules/.bin/cucumber.js\r\n```\r\n\r\n**Note to Windows users:** invoke Cucumber.js with `cucumber-js` instead of `cucumber.js`. The latter is causing the operating system to invoke JScript instead of Node.js, because of the so-called file extension.\r\n\r\n### Examples\r\n\r\nA few example apps are available for you to browse:\r\n\r\n* [Rails app serving features in the browser](https://github.com/jbpros/cucumber-js-example)\r\n* [Express.js app running features in the cli](https://github.com/olivoil/NodeBDD)\r\n\r\n## Contribute\r\n\r\nSee [CONTRIBUTE](https://github.com/cucumber/cucumber-js/blob/master/CONTRIBUTE.md).\r\n\r\n## Help & support\r\n\r\n* Twitter: [@cucumber_js](https://twitter.com/#!/cucumber_js/)\r\n* IRC: [#cucumber](http://webchat.freenode.net?channels=cucumber&uio=d4) on Freenode\r\n* Google Groups: [cukes](https://groups.google.com/group/cukes)\r\n* [cukes.info](http://cukes.info)\r\n",
  "readmeFilename": "README.md",
  "_id": "cucumber@0.3.3",
  "_shasum": "7b98435acb130a803e7149d4948d4e57a4242e7c",
  "_from": "git+https://github.com/joshtombs/cucumber-js.git#78f79263e5855dd189e4bbe792cc6a34d7efcd19",
  "_resolved": "git+https://github.com/joshtombs/cucumber-js.git#78f79263e5855dd189e4bbe792cc6a34d7efcd19"
}
